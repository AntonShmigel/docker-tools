trigger:
  branches:
    include:
    - main
    - dev
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

pr:
  branches:
    include:
    - main
    - dev
  paths:
    include:
    - 'image/*'
    exclude:
    - 'powershell/*'

resources:
- repo: self

variables:
  sitecoreVersion: 10.3.0
  revision: $[counter(format('sitecoreVersion{0}', variables['sitecoreVersion']), 100)]
  osName: ltsc2022
  baseImage: ideftdevacr.azurecr.io/base/nanoserver:$(osName)
  buildImage: ideftdevacr.azurecr.io/base/servercore:ltsc2022
  buildNumber: $(Build.BuildID)
  REGISTRY_MAPPED: $(Registry)
  REGISTRY_SERVICE_CONNECTION_MAPPED: $(RegistryServiceConnection)
  PASSWORD_MAPPED: $(Password)
  USERNAME_MAPPED: $(Username)
  workingDirectory:'$(Build.SourcesDirectory)/image/build'
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    stability: ''
    namespace: 'tools'
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
    stability: '-unstable'
    namespace: 'experimental'

pool: Default

stages:

- stage: Versioning

  jobs:
  - job: Tagging
    steps:

    - task: PowerShell@2
      displayName: "Generate tags"
      inputs:
        targetType: filePath
        filePath: "$(workingDirectory)/Tagging-BaseImage.ps1"
        arguments: >
          -AzureContainerRegistry "$(REGISTRY_MAPPED)"
          -Username "$(USERNAME_MAPPED)"
          -Password "$(PASSWORD_MAPPED)"
          -BaseImage "$(baseImage)"
          -SitecoreVersion "$(sitecoreVersion)"
          -Revision "$(revision)"
          -BuildNumber "$(buildNumber)"
          -OsName "$(osName)"
          -Stability "$(stability)"
        pwsh: true
        timeoutInMinutes: 10
        
- stage: Build
  dependsOn: Versioning

  jobs:
  - job: Build
    displayName: Build image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
    steps:

    - task: DockerCompose@0
      displayName: Build image
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: '$(RegistryServiceConnection)'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY_MAPPED)/$(namespace)/
          VERSION=$(longTag)
          BASE_IMAGE=$(baseImage)
          BUILD_IMAGE=$(buildImage)
        action: 'Build services'
        additionalImageTags: '$(shortTag)'
        arguments: '--force-rm'
        currentWorkingDirectory: '$(Build.SourcesDirectory)/image/src'

- stage: Test
  dependsOn: Build

  jobs:
  - job: Pester
    displayName: Run Pester tests
    steps:

    - task: Pester@9
      inputs:
        scriptFolder: "$(Build.SourcesDirectory)/image/test/*"
        resultsFile: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        usePSCore: False
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "NUnit"
        testResultsFiles: "$(Build.SourcesDirectory)/image/test/Test-Pester.XML"
        failTaskOnFailedTests: true

- stage: Push
  dependsOn:
  - Versioning
  - Test
  condition: ne(variables['Build.Reason'], 'PullRequest')

  jobs:
  - job: Push
    displayName: Push image
    variables:
      longTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.longTag']]
      shortTag: $[stageDependencies.Versioning.Tagging.outputs['Tags.shortTag']]
    steps:

    - task: Docker@2
      displayName: Login to registry
      inputs:
        containerRegistry: '$(RegistryServiceConnection)'
        command: 'login'

    - task: DockerCompose@0
      displayName: Push image
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: '$(RegistryServiceConnection)'
        dockerComposeFile: '**/docker-compose.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY_MAPPED)/$(namespace)/
          VERSION=$(longTag)
          BASE_IMAGE=$(baseImage)
          BUILD_IMAGE=$(buildImage)
        action: 'Push services'
        additionalImageTags: '$(shortTag)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)/image/src'